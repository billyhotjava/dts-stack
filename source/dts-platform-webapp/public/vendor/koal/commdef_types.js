//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


enMsgType = {
  'enMsg_Login' : 1,
  'enMsg_LogOut' : 2,
  'enMsg_NotifyerStart' : 268369920,
  'enMsg_NotifyerDevin' : 268369921,
  'enMsg_NotifyerDevOut' : 268369922,
  'enMsg_NotifyerDevModify' : 268369923,
  'enMsg_NotifyerSessionClose' : 268369924
};
enPinType = {
  'PIN_ADMIN' : 0,
  'PIN_USER' : 1
};
enSecRight = {
  'NO_SECRIGHT' : 0,
  'ADM_SECRIGHT' : 1,
  'USER_SECRIGHT' : 2,
  'ANYONE_SECRIGHT' : 3
};
enDevType = {
  'devtype_skf' : 0,
  'devtype_csp' : 1,
  'devtype_pkcs11' : 2
};
sessionTicket = function(args) {
  this.sessionID = null;
  this.ticket = null;
  if (args) {
    if (args.sessionID !== undefined && args.sessionID !== null) {
      this.sessionID = args.sessionID;
    }
    if (args.ticket !== undefined && args.ticket !== null) {
      this.ticket = args.ticket;
    }
  }
};
sessionTicket.prototype = {};
sessionTicket.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I64) {
        this.sessionID = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.ticket = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

sessionTicket.prototype.write = function(output) {
  output.writeStructBegin('sessionTicket');
  if (this.sessionID !== null && this.sessionID !== undefined) {
    output.writeFieldBegin('sessionID', Thrift.Type.I64, 1);
    output.writeI64(this.sessionID);
    output.writeFieldEnd();
  }
  if (this.ticket !== null && this.ticket !== undefined) {
    output.writeFieldBegin('ticket', Thrift.Type.STRING, 2);
    output.writeString(this.ticket);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

msgRequest = function(args) {
  this.reqid = null;
  this.msgType = null;
  this.version = null;
  this.extend = null;
  this.jsonBody = null;
  if (args) {
    if (args.reqid !== undefined && args.reqid !== null) {
      this.reqid = args.reqid;
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = args.extend;
    }
    if (args.jsonBody !== undefined && args.jsonBody !== null) {
      this.jsonBody = args.jsonBody;
    }
  }
};
msgRequest.prototype = {};
msgRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.reqid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.msgType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I64) {
        this.extend = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.jsonBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

msgRequest.prototype.write = function(output) {
  output.writeStructBegin('msgRequest');
  if (this.reqid !== null && this.reqid !== undefined) {
    output.writeFieldBegin('reqid', Thrift.Type.I32, 1);
    output.writeI32(this.reqid);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I32, 2);
    output.writeI32(this.msgType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.I64, 4);
    output.writeI64(this.extend);
    output.writeFieldEnd();
  }
  if (this.jsonBody !== null && this.jsonBody !== undefined) {
    output.writeFieldBegin('jsonBody', Thrift.Type.STRING, 5);
    output.writeString(this.jsonBody);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

msgResponse = function(args) {
  this.respid = null;
  this.msgType = null;
  this.version = null;
  this.errCode = null;
  this.extend = null;
  this.jsonBody = null;
  if (args) {
    if (args.respid !== undefined && args.respid !== null) {
      this.respid = args.respid;
    }
    if (args.msgType !== undefined && args.msgType !== null) {
      this.msgType = args.msgType;
    }
    if (args.version !== undefined && args.version !== null) {
      this.version = args.version;
    }
    if (args.errCode !== undefined && args.errCode !== null) {
      this.errCode = args.errCode;
    }
    if (args.extend !== undefined && args.extend !== null) {
      this.extend = args.extend;
    }
    if (args.jsonBody !== undefined && args.jsonBody !== null) {
      this.jsonBody = args.jsonBody;
    }
  }
};
msgResponse.prototype = {};
msgResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.respid = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.msgType = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.version = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 4:
      if (ftype == Thrift.Type.I32) {
        this.errCode = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 5:
      if (ftype == Thrift.Type.I64) {
        this.extend = input.readI64().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 6:
      if (ftype == Thrift.Type.STRING) {
        this.jsonBody = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

msgResponse.prototype.write = function(output) {
  output.writeStructBegin('msgResponse');
  if (this.respid !== null && this.respid !== undefined) {
    output.writeFieldBegin('respid', Thrift.Type.I32, 1);
    output.writeI32(this.respid);
    output.writeFieldEnd();
  }
  if (this.msgType !== null && this.msgType !== undefined) {
    output.writeFieldBegin('msgType', Thrift.Type.I32, 2);
    output.writeI32(this.msgType);
    output.writeFieldEnd();
  }
  if (this.version !== null && this.version !== undefined) {
    output.writeFieldBegin('version', Thrift.Type.I32, 3);
    output.writeI32(this.version);
    output.writeFieldEnd();
  }
  if (this.errCode !== null && this.errCode !== undefined) {
    output.writeFieldBegin('errCode', Thrift.Type.I32, 4);
    output.writeI32(this.errCode);
    output.writeFieldEnd();
  }
  if (this.extend !== null && this.extend !== undefined) {
    output.writeFieldBegin('extend', Thrift.Type.I64, 5);
    output.writeI64(this.extend);
    output.writeFieldEnd();
  }
  if (this.jsonBody !== null && this.jsonBody !== undefined) {
    output.writeFieldBegin('jsonBody', Thrift.Type.STRING, 6);
    output.writeString(this.jsonBody);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

