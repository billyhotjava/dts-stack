//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

kmailService_mimeEncrypt_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_mimeEncrypt_args.prototype = {};
kmailService_mimeEncrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeEncrypt_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeEncrypt_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeEncrypt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_mimeEncrypt_result.prototype = {};
kmailService_mimeEncrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeEncrypt_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeEncrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeDecrypt_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_mimeDecrypt_args.prototype = {};
kmailService_mimeDecrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeDecrypt_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeDecrypt_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeDecrypt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_mimeDecrypt_result.prototype = {};
kmailService_mimeDecrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeDecrypt_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeDecrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_addAttachFile_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_addAttachFile_args.prototype = {};
kmailService_addAttachFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_addAttachFile_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_addAttachFile_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_addAttachFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_addAttachFile_result.prototype = {};
kmailService_addAttachFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_addAttachFile_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_addAttachFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_saveAttachFile_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_saveAttachFile_args.prototype = {};
kmailService_saveAttachFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_saveAttachFile_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_saveAttachFile_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_saveAttachFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_saveAttachFile_result.prototype = {};
kmailService_saveAttachFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_saveAttachFile_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_saveAttachFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeSign_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_mimeSign_args.prototype = {};
kmailService_mimeSign_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeSign_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeSign_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeSign_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_mimeSign_result.prototype = {};
kmailService_mimeSign_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeSign_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeSign_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeVerify_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_mimeVerify_args.prototype = {};
kmailService_mimeVerify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeVerify_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeVerify_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeVerify_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_mimeVerify_result.prototype = {};
kmailService_mimeVerify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeVerify_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeVerify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeSignEncrypt_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
kmailService_mimeSignEncrypt_args.prototype = {};
kmailService_mimeSignEncrypt_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeSignEncrypt_args.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeSignEncrypt_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailService_mimeSignEncrypt_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
kmailService_mimeSignEncrypt_result.prototype = {};
kmailService_mimeSignEncrypt_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

kmailService_mimeSignEncrypt_result.prototype.write = function(output) {
  output.writeStructBegin('kmailService_mimeSignEncrypt_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

kmailServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
kmailServiceClient.prototype = {};

kmailServiceClient.prototype.mimeEncrypt = function(tk, req, callback) {
  this.send_mimeEncrypt(tk, req, callback); 
  if (!callback) {
    return this.recv_mimeEncrypt();
  }
};

kmailServiceClient.prototype.send_mimeEncrypt = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_mimeEncrypt_args(params);
  try {
    this.output.writeMessageBegin('mimeEncrypt', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_mimeEncrypt();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_mimeEncrypt = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_mimeEncrypt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mimeEncrypt failed: unknown result';
};

kmailServiceClient.prototype.mimeDecrypt = function(tk, req, callback) {
  this.send_mimeDecrypt(tk, req, callback); 
  if (!callback) {
    return this.recv_mimeDecrypt();
  }
};

kmailServiceClient.prototype.send_mimeDecrypt = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_mimeDecrypt_args(params);
  try {
    this.output.writeMessageBegin('mimeDecrypt', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_mimeDecrypt();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_mimeDecrypt = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_mimeDecrypt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mimeDecrypt failed: unknown result';
};

kmailServiceClient.prototype.addAttachFile = function(tk, req, callback) {
  this.send_addAttachFile(tk, req, callback); 
  if (!callback) {
    return this.recv_addAttachFile();
  }
};

kmailServiceClient.prototype.send_addAttachFile = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_addAttachFile_args(params);
  try {
    this.output.writeMessageBegin('addAttachFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_addAttachFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_addAttachFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_addAttachFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'addAttachFile failed: unknown result';
};

kmailServiceClient.prototype.saveAttachFile = function(tk, req, callback) {
  this.send_saveAttachFile(tk, req, callback); 
  if (!callback) {
    return this.recv_saveAttachFile();
  }
};

kmailServiceClient.prototype.send_saveAttachFile = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_saveAttachFile_args(params);
  try {
    this.output.writeMessageBegin('saveAttachFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_saveAttachFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_saveAttachFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_saveAttachFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'saveAttachFile failed: unknown result';
};

kmailServiceClient.prototype.mimeSign = function(tk, req, callback) {
  this.send_mimeSign(tk, req, callback); 
  if (!callback) {
    return this.recv_mimeSign();
  }
};

kmailServiceClient.prototype.send_mimeSign = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_mimeSign_args(params);
  try {
    this.output.writeMessageBegin('mimeSign', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_mimeSign();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_mimeSign = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_mimeSign_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mimeSign failed: unknown result';
};

kmailServiceClient.prototype.mimeVerify = function(tk, req, callback) {
  this.send_mimeVerify(tk, req, callback); 
  if (!callback) {
    return this.recv_mimeVerify();
  }
};

kmailServiceClient.prototype.send_mimeVerify = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_mimeVerify_args(params);
  try {
    this.output.writeMessageBegin('mimeVerify', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_mimeVerify();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_mimeVerify = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_mimeVerify_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mimeVerify failed: unknown result';
};

kmailServiceClient.prototype.mimeSignEncrypt = function(tk, req, callback) {
  this.send_mimeSignEncrypt(tk, req, callback); 
  if (!callback) {
    return this.recv_mimeSignEncrypt();
  }
};

kmailServiceClient.prototype.send_mimeSignEncrypt = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new kmailService_mimeSignEncrypt_args(params);
  try {
    this.output.writeMessageBegin('mimeSignEncrypt', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_mimeSignEncrypt();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

kmailServiceClient.prototype.recv_mimeSignEncrypt = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new kmailService_mimeSignEncrypt_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'mimeSignEncrypt failed: unknown result';
};
