//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

pkiService_getInitStat_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_getInitStat_args.prototype = {};
pkiService_getInitStat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getInitStat_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getInitStat_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getInitStat_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_getInitStat_result.prototype = {};
pkiService_getInitStat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getInitStat_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getInitStat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_login_args = function(args) {
  this.req = null;
  if (args) {
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_login_args.prototype = {};
pkiService_login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_login_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_login_args');
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 1);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_login_result.prototype = {};
pkiService_login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_login_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_logout_args = function(args) {
  this.tk = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
  }
};
pkiService_logout_args.prototype = {};
pkiService_logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_logout_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_logout_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_logout_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_logout_result.prototype = {};
pkiService_logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_logout_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_logout_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getNotify_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_getNotify_args.prototype = {};
pkiService_getNotify_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getNotify_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getNotify_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getNotify_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_getNotify_result.prototype = {};
pkiService_getNotify_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getNotify_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getNotify_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getVersions_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_getVersions_args.prototype = {};
pkiService_getVersions_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getVersions_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getVersions_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getVersions_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_getVersions_result.prototype = {};
pkiService_getVersions_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getVersions_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getVersions_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_taskKill_args = function(args) {
};
pkiService_taskKill_args.prototype = {};
pkiService_taskKill_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_taskKill_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_taskKill_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_taskKill_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_taskKill_result.prototype = {};
pkiService_taskKill_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_taskKill_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_taskKill_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getSysInfo_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_getSysInfo_args.prototype = {};
pkiService_getSysInfo_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getSysInfo_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getSysInfo_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getSysInfo_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_getSysInfo_result.prototype = {};
pkiService_getSysInfo_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getSysInfo_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getSysInfo_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_setTrustedDrives_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_setTrustedDrives_args.prototype = {};
pkiService_setTrustedDrives_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_setTrustedDrives_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_setTrustedDrives_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_setTrustedDrives_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_setTrustedDrives_result.prototype = {};
pkiService_setTrustedDrives_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_setTrustedDrives_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_setTrustedDrives_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getLoginTempParam_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
pkiService_getLoginTempParam_args.prototype = {};
pkiService_getLoginTempParam_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getLoginTempParam_args.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getLoginTempParam_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiService_getLoginTempParam_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
pkiService_getLoginTempParam_result.prototype = {};
pkiService_getLoginTempParam_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

pkiService_getLoginTempParam_result.prototype.write = function(output) {
  output.writeStructBegin('pkiService_getLoginTempParam_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

pkiServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
pkiServiceClient.prototype = {};

pkiServiceClient.prototype.getInitStat = function(req, callback) {
  this.send_getInitStat(req, callback); 
  if (!callback) {
    return this.recv_getInitStat();
  }
};

pkiServiceClient.prototype.send_getInitStat = function(req, callback) {
  var params = {
    req: req
  };
  var args = new pkiService_getInitStat_args(params);
  try {
    this.output.writeMessageBegin('getInitStat', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getInitStat();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_getInitStat = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_getInitStat_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getInitStat failed: unknown result';
};

pkiServiceClient.prototype.login = function(req, callback) {
  this.send_login(req, callback); 
  if (!callback) {
    return this.recv_login();
  }
};

pkiServiceClient.prototype.send_login = function(req, callback) {
  var params = {
    req: req
  };
  var args = new pkiService_login_args(params);
  try {
    this.output.writeMessageBegin('login', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_login();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_login = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'login failed: unknown result';
};

pkiServiceClient.prototype.logout = function(tk, callback) {
  this.send_logout(tk, callback); 
  if (!callback) {
    return this.recv_logout();
  }
};

pkiServiceClient.prototype.send_logout = function(tk, callback) {
  var params = {
    tk: tk
  };
  var args = new pkiService_logout_args(params);
  try {
    this.output.writeMessageBegin('logout', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_logout();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_logout = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'logout failed: unknown result';
};

pkiServiceClient.prototype.getNotify = function(tk, req, callback) {
  this.send_getNotify(tk, req, callback); 
  if (!callback) {
    return this.recv_getNotify();
  }
};

pkiServiceClient.prototype.send_getNotify = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new pkiService_getNotify_args(params);
  try {
    this.output.writeMessageBegin('getNotify', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getNotify();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_getNotify = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_getNotify_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getNotify failed: unknown result';
};

pkiServiceClient.prototype.getVersions = function(tk, req, callback) {
  this.send_getVersions(tk, req, callback); 
  if (!callback) {
    return this.recv_getVersions();
  }
};

pkiServiceClient.prototype.send_getVersions = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new pkiService_getVersions_args(params);
  try {
    this.output.writeMessageBegin('getVersions', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getVersions();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_getVersions = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_getVersions_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getVersions failed: unknown result';
};

pkiServiceClient.prototype.taskKill = function(callback) {
  this.send_taskKill(callback); 
  if (!callback) {
    return this.recv_taskKill();
  }
};

pkiServiceClient.prototype.send_taskKill = function(callback) {
  var args = new pkiService_taskKill_args();
  try {
    this.output.writeMessageBegin('taskKill', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_taskKill();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_taskKill = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_taskKill_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'taskKill failed: unknown result';
};

pkiServiceClient.prototype.getSysInfo = function(tk, req, callback) {
  this.send_getSysInfo(tk, req, callback); 
  if (!callback) {
    return this.recv_getSysInfo();
  }
};

pkiServiceClient.prototype.send_getSysInfo = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new pkiService_getSysInfo_args(params);
  try {
    this.output.writeMessageBegin('getSysInfo', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getSysInfo();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_getSysInfo = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_getSysInfo_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getSysInfo failed: unknown result';
};

pkiServiceClient.prototype.setTrustedDrives = function(tk, req, callback) {
  this.send_setTrustedDrives(tk, req, callback); 
  if (!callback) {
    return this.recv_setTrustedDrives();
  }
};

pkiServiceClient.prototype.send_setTrustedDrives = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new pkiService_setTrustedDrives_args(params);
  try {
    this.output.writeMessageBegin('setTrustedDrives', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_setTrustedDrives();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_setTrustedDrives = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_setTrustedDrives_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'setTrustedDrives failed: unknown result';
};

pkiServiceClient.prototype.getLoginTempParam = function(tk, req, callback) {
  this.send_getLoginTempParam(tk, req, callback); 
  if (!callback) {
    return this.recv_getLoginTempParam();
  }
};

pkiServiceClient.prototype.send_getLoginTempParam = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new pkiService_getLoginTempParam_args(params);
  try {
    this.output.writeMessageBegin('getLoginTempParam', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getLoginTempParam();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

pkiServiceClient.prototype.recv_getLoginTempParam = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new pkiService_getLoginTempParam_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getLoginTempParam failed: unknown result';
};
