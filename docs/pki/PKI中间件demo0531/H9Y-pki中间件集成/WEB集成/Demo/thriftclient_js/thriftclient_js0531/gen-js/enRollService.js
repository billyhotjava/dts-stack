//
// Autogenerated by Thrift Compiler (0.12.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

enRollService_makePkcs10_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_makePkcs10_args.prototype = {};
enRollService_makePkcs10_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_makePkcs10_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_makePkcs10_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_makePkcs10_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_makePkcs10_result.prototype = {};
enRollService_makePkcs10_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_makePkcs10_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_makePkcs10_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_genKeypair_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_genKeypair_args.prototype = {};
enRollService_genKeypair_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_genKeypair_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_genKeypair_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_genKeypair_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_genKeypair_result.prototype = {};
enRollService_genKeypair_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_genKeypair_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_genKeypair_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importEncKeypair_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_importEncKeypair_args.prototype = {};
enRollService_importEncKeypair_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importEncKeypair_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importEncKeypair_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importEncKeypair_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_importEncKeypair_result.prototype = {};
enRollService_importEncKeypair_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importEncKeypair_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importEncKeypair_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importX509Cert_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_importX509Cert_args.prototype = {};
enRollService_importX509Cert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importX509Cert_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importX509Cert_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importX509Cert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_importX509Cert_result.prototype = {};
enRollService_importX509Cert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importX509Cert_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importX509Cert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importPfxCert_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_importPfxCert_args.prototype = {};
enRollService_importPfxCert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importPfxCert_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importPfxCert_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importPfxCert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_importPfxCert_result.prototype = {};
enRollService_importPfxCert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importPfxCert_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importPfxCert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_getCert_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_getCert_args.prototype = {};
enRollService_getCert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_getCert_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_getCert_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_getCert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_getCert_result.prototype = {};
enRollService_getCert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_getCert_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_getCert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importPfx2SkfFile_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_importPfx2SkfFile_args.prototype = {};
enRollService_importPfx2SkfFile_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importPfx2SkfFile_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importPfx2SkfFile_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_importPfx2SkfFile_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_importPfx2SkfFile_result.prototype = {};
enRollService_importPfx2SkfFile_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_importPfx2SkfFile_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_importPfx2SkfFile_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_issueCert_args = function(args) {
  this.tk = null;
  this.req = null;
  if (args) {
    if (args.tk !== undefined && args.tk !== null) {
      this.tk = new sessionTicket(args.tk);
    }
    if (args.req !== undefined && args.req !== null) {
      this.req = new msgRequest(args.req);
    }
  }
};
enRollService_issueCert_args.prototype = {};
enRollService_issueCert_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.tk = new sessionTicket();
        this.tk.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.req = new msgRequest();
        this.req.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_issueCert_args.prototype.write = function(output) {
  output.writeStructBegin('enRollService_issueCert_args');
  if (this.tk !== null && this.tk !== undefined) {
    output.writeFieldBegin('tk', Thrift.Type.STRUCT, 1);
    this.tk.write(output);
    output.writeFieldEnd();
  }
  if (this.req !== null && this.req !== undefined) {
    output.writeFieldBegin('req', Thrift.Type.STRUCT, 2);
    this.req.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollService_issueCert_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new msgResponse(args.success);
    }
  }
};
enRollService_issueCert_result.prototype = {};
enRollService_issueCert_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true) {
    var ret = input.readFieldBegin();
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid) {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new msgResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

enRollService_issueCert_result.prototype.write = function(output) {
  output.writeStructBegin('enRollService_issueCert_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

enRollServiceClient = function(input, output) {
  this.input = input;
  this.output = (!output) ? input : output;
  this.seqid = 0;
};
enRollServiceClient.prototype = {};

enRollServiceClient.prototype.makePkcs10 = function(tk, req, callback) {
  this.send_makePkcs10(tk, req, callback); 
  if (!callback) {
    return this.recv_makePkcs10();
  }
};

enRollServiceClient.prototype.send_makePkcs10 = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_makePkcs10_args(params);
  try {
    this.output.writeMessageBegin('makePkcs10', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_makePkcs10();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_makePkcs10 = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_makePkcs10_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'makePkcs10 failed: unknown result';
};

enRollServiceClient.prototype.genKeypair = function(tk, req, callback) {
  this.send_genKeypair(tk, req, callback); 
  if (!callback) {
    return this.recv_genKeypair();
  }
};

enRollServiceClient.prototype.send_genKeypair = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_genKeypair_args(params);
  try {
    this.output.writeMessageBegin('genKeypair', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_genKeypair();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_genKeypair = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_genKeypair_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'genKeypair failed: unknown result';
};

enRollServiceClient.prototype.importEncKeypair = function(tk, req, callback) {
  this.send_importEncKeypair(tk, req, callback); 
  if (!callback) {
    return this.recv_importEncKeypair();
  }
};

enRollServiceClient.prototype.send_importEncKeypair = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_importEncKeypair_args(params);
  try {
    this.output.writeMessageBegin('importEncKeypair', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_importEncKeypair();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_importEncKeypair = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_importEncKeypair_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'importEncKeypair failed: unknown result';
};

enRollServiceClient.prototype.importX509Cert = function(tk, req, callback) {
  this.send_importX509Cert(tk, req, callback); 
  if (!callback) {
    return this.recv_importX509Cert();
  }
};

enRollServiceClient.prototype.send_importX509Cert = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_importX509Cert_args(params);
  try {
    this.output.writeMessageBegin('importX509Cert', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_importX509Cert();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_importX509Cert = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_importX509Cert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'importX509Cert failed: unknown result';
};

enRollServiceClient.prototype.importPfxCert = function(tk, req, callback) {
  this.send_importPfxCert(tk, req, callback); 
  if (!callback) {
    return this.recv_importPfxCert();
  }
};

enRollServiceClient.prototype.send_importPfxCert = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_importPfxCert_args(params);
  try {
    this.output.writeMessageBegin('importPfxCert', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_importPfxCert();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_importPfxCert = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_importPfxCert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'importPfxCert failed: unknown result';
};

enRollServiceClient.prototype.getCert = function(tk, req, callback) {
  this.send_getCert(tk, req, callback); 
  if (!callback) {
    return this.recv_getCert();
  }
};

enRollServiceClient.prototype.send_getCert = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_getCert_args(params);
  try {
    this.output.writeMessageBegin('getCert', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_getCert();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_getCert = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_getCert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'getCert failed: unknown result';
};

enRollServiceClient.prototype.importPfx2SkfFile = function(tk, req, callback) {
  this.send_importPfx2SkfFile(tk, req, callback); 
  if (!callback) {
    return this.recv_importPfx2SkfFile();
  }
};

enRollServiceClient.prototype.send_importPfx2SkfFile = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_importPfx2SkfFile_args(params);
  try {
    this.output.writeMessageBegin('importPfx2SkfFile', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_importPfx2SkfFile();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_importPfx2SkfFile = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_importPfx2SkfFile_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'importPfx2SkfFile failed: unknown result';
};

enRollServiceClient.prototype.issueCert = function(tk, req, callback) {
  this.send_issueCert(tk, req, callback); 
  if (!callback) {
    return this.recv_issueCert();
  }
};

enRollServiceClient.prototype.send_issueCert = function(tk, req, callback) {
  var params = {
    tk: tk,
    req: req
  };
  var args = new enRollService_issueCert_args(params);
  try {
    this.output.writeMessageBegin('issueCert', Thrift.MessageType.CALL, this.seqid);
    args.write(this.output);
    this.output.writeMessageEnd();
    if (callback) {
      var self = this;
      this.output.getTransport().flush(true, function() {
        var result = null;
        try {
          result = self.recv_issueCert();
        } catch (e) {
          result = e;
        }
        callback(result);
      });
    } else {
      return this.output.getTransport().flush();
    }
  }
  catch (e) {
    if (typeof this.output.getTransport().reset === 'function') {
      this.output.getTransport().reset();
    }
    throw e;
  }
};

enRollServiceClient.prototype.recv_issueCert = function() {
  var ret = this.input.readMessageBegin();
  var mtype = ret.mtype;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new enRollService_issueCert_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'issueCert failed: unknown result';
};
