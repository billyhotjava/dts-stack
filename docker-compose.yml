## Compose file compatible with docker compose v2+. Keep YAML anchors (x-*)
## which are ignored by Compose and help reuse snippets.

x-hc: &hc
  interval: 10s
  timeout: 5s
  retries: 30
  start_period: 20s

services:

  dts-proxy:
    image: ${IMAGE_TRAEFIK}
    container_name: dts-proxy
    command:
      - "--api.dashboard=${TRAEFIK_DASHBOARD}"
      - "--api.insecure=${TRAEFIK_DASHBOARD}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.docker.network=dts-core"
      - "--providers.file.filename=/etc/traefik/dynamic/traefik-dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--ping=${TRAEFIK_ENABLE_PING}"
      - "--entrypoints.metrics.address=:${TRAEFIK_METRICS_PORT}"
      - "--accesslog=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"

    ports:
      - "80:80"
      - "${TLS_PORT}:443"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT}:8080"
      - "127.0.0.1:${TRAEFIK_METRICS_PORT}:${TRAEFIK_METRICS_PORT}"
    volumes:
      # Do not relabel docker.sock; keep read-only
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/dts-proxy/dynamic:/etc/traefik/dynamic:ro,z
      - ./services/certs:/etc/traefik/certs:ro,z
      - ./services/certs/server.crt:/certs/server.crt:ro,z
      - ./services/certs/server.key:/certs/server.key:ro,z
    labels:
      - "traefik.enable=true"
      # - "traefik.http.routers.default-secure.tls=true"
      # - "traefik.http.routers.default-secure.entrypoints=websecure"
      # - "traefik.http.routers.default-secure.rule=HostRegexp(`{any:.*}`)"
      # Default TLS store and certificates are defined via file provider (dynamic/traefik-dynamic.yml)
    restart: unless-stopped
    networks:
      - dts-core

  dts-pg:
    image: ${IMAGE_POSTGRES}
    environment:
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}
      POSTGRES_USER: ${PG_SUPER_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      # dts-admin (dev/optional)
      PG_DB_DTADMIN: ${PG_DB_DTADMIN}
      PG_USER_DTADMIN: ${PG_USER_DTADMIN}
      PG_PWD_DTADMIN: ${PG_PWD_DTADMIN}
      PG_DB_KEYCLOAK: ${PG_DB_KEYCLOAK}
      PG_USER_KEYCLOAK: ${PG_USER_KEYCLOAK}
      PG_PWD_KEYCLOAK: ${PG_PWD_KEYCLOAK}
      # DTS Platform/Common
      PG_DB_DTPS: ${PG_DB_DTPS}
      PG_USER_DTPS: ${PG_USER_DTPS}
      PG_PWD_DTPS: ${PG_PWD_DTPS}
      PG_DB_DTCOMMON: ${PG_DB_DTCOMMON}
      PG_USER_DTCOMMON: ${PG_USER_DTCOMMON}
      PG_PWD_DTCOMMON: ${PG_PWD_DTCOMMON}
      # Ranger
      PG_DB_RANGER: ${PG_DB_RANGER}
      PG_USER_RANGER: ${PG_USER_RANGER}
      PG_PWD_RANGER: ${PG_PWD_RANGER}
    volumes:
      - ./services/dts-pg/data:/var/lib/postgresql/data:Z
      - ./services/dts-pg/init:/docker-entrypoint-initdb.d:ro,Z
    healthcheck:
      # Keep healthcheck lightweight and deterministic; do not rely on container env expansion
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 -U ${PG_SUPER_USER} -d postgres && psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 5432 -U ${PG_SUPER_USER} -d postgres -c 'SELECT 1' >/dev/null"]
      interval: 10s
      timeout: 30s
      retries: 10
      start_period: 30s   
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - dts-core


  dts-keycloak:
    image: ${IMAGE_KEYCLOAK}
    container_name: dts-keycloak
    command:
      - start
      - --hostname=${HOST_SSO}
      - --proxy-headers=xforwarded
      - --http-enabled=${KC_HTTP_ENABLED}
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_KEYCLOAK}
      KC_DB_USERNAME: ${PG_USER_KEYCLOAK}
      KC_DB_PASSWORD: ${PG_PWD_KEYCLOAK}
      KC_DB_URL_PROPERTIES: "sslmode=disable"
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_FEATURES: scripts
    depends_on:
      dts-pg:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kc-redirect.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc-redirect.entrypoints=web"
      - "traefik.http.routers.kc-redirect.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.kc.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc.entrypoints=websecure"
      - "traefik.http.routers.kc.tls=true"
      - "traefik.http.routers.kc.service=kc"
      #- "traefik.http.routers.kc.tls.domains[0].main=${HOST_SSO}"
      - "traefik.http.services.kc.loadbalancer.server.port=8080"
      - "traefik.http.services.kc.loadbalancer.passhostheader=true"
      #- optional config for Keycloak behind proxy with path
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Host=${HOST_SSO}"
      - "traefik.http.routers.kc.middlewares=kc-headers"
    restart: unless-stopped
    networks:
      - dts-core

  # Note: Keycloak realm/clients are configured manually via UI. No auto-init.

  # dts-minio:
  #   image: ${IMAGE_MINIO}
  #   command: server /data --console-address ":9001"
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #     MINIO_REGION_NAME: ${MINIO_REGION_NAME}
  #     MINIO_SERVER_URL: ${MINIO_SERVER_URL}
  #     MINIO_BROWSER_REDIRECT_URL: ${MINIO_BROWSER_REDIRECT_URL}
  #   volumes:
  #     - ./services/dts-minio/data:/data:Z
  #   healthcheck:
  #     test: ["CMD","curl","-fsS","http://localhost:9000/minio/health/live"]
  #     <<: *hc
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.http.routers.dts-minio-console.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/`)"
  #     - "traefik.http.routers.dts-minio-console.entrypoints=websecure"
  #     - "traefik.http.routers.dts-minio-console.tls=true"
  #     - "traefik.http.routers.dts-minio-console.service=dts-minio-console"
  #     - "traefik.http.services.dts-minio-console.loadbalancer.server.port=9001"
  #     - "traefik.http.routers.dts-minio-api.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/s3`)"
  #     - "traefik.http.routers.dts-minio-api.entrypoints=websecure"
  #     - "traefik.http.routers.dts-minio-api.tls=true"
  #     - "traefik.http.routers.dts-minio-api.service=dts-minio-api"
  #     - "traefik.http.services.dts-minio-api.loadbalancer.server.port=9000"
  #     - "traefik.http.middlewares.dts-strip-s3.stripprefixregex.regex=/s3"
  #     - "traefik.http.routers.dts-minio-api.middlewares=dts-strip-s3@docker"
  #   restart: unless-stopped
  #   networks:
  #     - dts-core

  # dts-minio-init:
  #   image: ${IMAGE_MINIO_MC}
  #   depends_on:
  #     dts-minio:
  #       condition: service_healthy
  #   environment:
  #     MINIO_ROOT_USER: ${MINIO_ROOT_USER}
  #     MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
  #     S3_BUCKET: ${S3_BUCKET}
  #   entrypoint: ["/bin/sh","-c","/init/init.sh"]
  #   volumes:
  #     - ./services/dts-minio-init/init:/init:ro,Z
  #   restart: "no"
  #   networks:
  #     - dts-core

  # dts-nessie:
  #   image: ${IMAGE_NESSIE}
  #   container_name: dts-nessie
  #   healthcheck:
  #     test: ["CMD-SHELL","curl -fsS http://127.0.0.1:19120/api/v1/config >/dev/null || wget -qO- http://127.0.0.1:19120/api/v1/config >/dev/null"]
  #     <<: *hc
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=dts-core"
  #     - "traefik.http.routers.dts-nessie.rule=Host(`${HOST_NESSIE}`)"
  #     - "traefik.http.routers.dts-nessie.entrypoints=websecure"
  #     - "traefik.http.routers.dts-nessie.tls=true"
  #     - "traefik.http.services.dts-nessie.loadbalancer.server.port=19120"
  #   restart: unless-stopped
  #   networks:
  #     - dts-core

  dts-trino:
    image: ${IMAGE_TRINO}
    container_name: dts-trino 
    volumes:
      - ./services/dts-trino/init/catalog:/etc/trino/catalog:ro,Z
      - ./services/dts-trino/config.properties:/etc/trino/config.properties:ro,Z
      - ./services/dts-trino/hive-conf:/etc/trino/hive-conf:ro,Z
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8080/v1/info >/dev/null || exit 1"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dts-core"
   # Router (HTTPS)
      - "traefik.http.routers.dts-trino.rule=Host(`${HOST_TRINO}`) && PathPrefix(`/`)"
      - "traefik.http.routers.dts-trino.entrypoints=websecure"
      - "traefik.http.routers.dts-trino.tls=true"

      # Backend service port
      - "traefik.http.services.dts-trino.loadbalancer.server.port=8080"

      # Root path redirect to /ui/
      - "traefik.http.middlewares.dts-trino-redirect.redirectregex.regex=^/$$"
      - "traefik.http.middlewares.dts-trino-redirect.redirectregex.replacement=/ui/"

      # HTTP -> HTTPS redirect for trino hostname only
      - "traefik.http.middlewares.dts-trino-https.redirectscheme.scheme=https"
      - "traefik.http.middlewares.dts-trino-https.redirectscheme.permanent=true"
      - "traefik.http.routers.dts-trino-http.rule=Host(`${HOST_TRINO}`)"
      - "traefik.http.routers.dts-trino-http.entrypoints=web"
      - "traefik.http.routers.dts-trino-http.middlewares=dts-trino-https@docker"

      # Chain middlewares without repeating the key
      - "traefik.http.routers.dts-trino.middlewares=dts-trino-redirect@docker"
    restart: unless-stopped
    networks:
      - dts-core

  # dts-ranger:
  #   image: ${IMAGE_RANGER_ADMIN}
  #   container_name: dts-ranger
  #   depends_on:
  #     dts-pg:
  #       condition: service_healthy
  #   environment:
  #     DB_FLAVOR: postgres
  #     DB_HOST: ${PG_HOST}
  #     DB_PORT: ${PG_PORT}
  #     DB_NAME: ${PG_DB_RANGER}
  #     DB_USER: ${PG_USER_RANGER}
  #     DB_PASSWORD: ${PG_PWD_RANGER}
  #     RANGER_ADMIN_PASSWORD: ${RANGER_ADMIN_PASSWORD}
  #     RANGER_TAGSYNC_PASSWORD: ${RANGER_TAGSYNC_PASSWORD}
  #     RANGER_USERSYNC_PASSWORD: ${RANGER_USERSYNC_PASSWORD}
  #   healthcheck:
  #     test: ["CMD-SHELL","curl -fsS http://127.0.0.1:6080 || wget -qO- http://127.0.0.1:6080 >/dev/null"]
  #     <<: *hc
  #   volumes:
  #     # Mount a separate data directory to avoid shadowing image's /opt/ranger
  #     - ./services/dts-ranger:/ranger-data
  #   labels:
  #     - "traefik.enable=true"
  #     - "traefik.docker.network=dts-core"
  #     - "traefik.http.routers.dts-ranger.rule=Host(`${HOST_RANGER}`)"
  #     - "traefik.http.routers.dts-ranger.entrypoints=websecure"
  #     - "traefik.http.routers.dts-ranger.tls=true"
  #     - "traefik.http.services.dts-ranger.loadbalancer.server.port=6080"
  #   restart: unless-stopped
  #   networks:
  #     - dts-core

volumes:
  maven-cache:

networks:
  dts-core:
    name: dts-core        # Real Docker network name
    driver: bridge
