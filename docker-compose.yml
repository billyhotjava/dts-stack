version: "3.9"

x-hc: &hc
  interval: 10s
  timeout: 5s
  retries: 30
  start_period: 20s

services:

  dts-proxy:
    image: ${IMAGE_TRAEFIK}
    container_name: dts-proxy
    command:
      - "--api.dashboard=${TRAEFIK_DASHBOARD}"
      - "--api.insecure=${TRAEFIK_DASHBOARD}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic/traefik-dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--ping=${TRAEFIK_ENABLE_PING}"
      - "--entrypoints.metrics.address=:${TRAEFIK_METRICS_PORT}"
      - "--accesslog=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"

    ports:
      - "80:80"
      - "${TLS_PORT}:443"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT}:8080"
      - "127.0.0.1:${TRAEFIK_METRICS_PORT}:${TRAEFIK_METRICS_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/dts-proxy/dynamic:/etc/traefik/dynamic:ro
      - ./services/certs:/etc/traefik/certs:ro
      - ./services/certs/server.crt:/certs/server.crt:ro
      - ./services/certs/server.key:/certs/server.key:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.default-secure.tls=true"
      - "traefik.http.routers.default-secure.entrypoints=websecure"
      - "traefik.http.routers.default-secure.rule=HostRegexp(`{any:.*}`)"
      - "traefik.tls.certificates[0].certFile=/certs/server.crt"
      - "traefik.tls.certificates[0].keyFile=/certs/server.key"
    restart: unless-stopped
    networks:
      - dts-core

  dts-pg:
    image: ${IMAGE_POSTGRES}
    environment:
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}
      POSTGRES_USER: ${PG_SUPER_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      # dts-admin (dev/optional)
      PG_DB_DTADMIN: ${PG_DB_DTADMIN}
      PG_USER_DTADMIN: ${PG_USER_DTADMIN}
      PG_PWD_DTADMIN: ${PG_PWD_DTADMIN}
      PG_DB_KEYCLOAK: ${PG_DB_KEYCLOAK}
      PG_USER_KEYCLOAK: ${PG_USER_KEYCLOAK}
      PG_PWD_KEYCLOAK: ${PG_PWD_KEYCLOAK}
      # Airflow
      PG_DB_AIRFLOW: ${PG_DB_AIRFLOW}
      PG_USER_AIRFLOW: ${PG_USER_AIRFLOW}
      PG_PWD_AIRFLOW: ${PG_PWD_AIRFLOW}
      # DTS Platform/Common
      PG_DB_DTPS: ${PG_DB_DTPS}
      PG_USER_DTPS: ${PG_USER_DTPS}
      PG_PWD_DTPS: ${PG_PWD_DTPS}
      PG_DB_DTCOMMON: ${PG_DB_DTCOMMON}
      PG_USER_DTCOMMON: ${PG_USER_DTCOMMON}
      PG_PWD_DTCOMMON: ${PG_PWD_DTCOMMON}
      # Ranger
      PG_DB_RANGER: ${PG_DB_RANGER}
      PG_USER_RANGER: ${PG_USER_RANGER}
      PG_PWD_RANGER: ${PG_PWD_RANGER}
      PG_DB_AIRBYTE: ${PG_DB_AIRBYTE}
      PG_USER_AIRBYTE: ${PG_USER_AIRBYTE}
      PG_PWD_AIRBYTE: ${PG_PWD_AIRBYTE}
      PG_DB_OM: ${PG_DB_OM}
      PG_USER_OM: ${PG_USER_OM}
      PG_PWD_OM: ${PG_PWD_OM}
      PG_DB_TEMPORAL: ${PG_DB_TEMPORAL}
      PG_USER_TEMPORAL: ${PG_USER_TEMPORAL}
      PG_PWD_TEMPORAL: ${PG_PWD_TEMPORAL}
    volumes:
      - ./services/dts-pg/data:/var/lib/postgresql/data
      - ./services/dts-pg/init:/docker-entrypoint-initdb.d
    healthcheck:
      # Keep healthcheck lightweight and deterministic; do not rely on container env expansion
      test: ["CMD-SHELL", "pg_isready -h 127.0.0.1 -p 5432 -U ${PG_SUPER_USER} -d postgres && psql -v ON_ERROR_STOP=1 -h 127.0.0.1 -p 5432 -U ${PG_SUPER_USER} -d postgres -c 'SELECT 1' >/dev/null"]
      interval: 10s
      timeout: 10s
      retries: 30
      start_period: 30s   
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - dts-core


  dts-keycloak:
    image: ${IMAGE_KEYCLOAK}
    container_name: dts-keycloak
    command:
      - start
      - --hostname=${HOST_SSO}
      - --proxy-headers=xforwarded
      - --http-enabled=${KC_HTTP_ENABLED}
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_KEYCLOAK}
      KC_DB_USERNAME: ${PG_USER_KEYCLOAK}
      KC_DB_PASSWORD: ${PG_PWD_KEYCLOAK}
      KC_DB_URL_PROPERTIES: "sslmode=disable"
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_FEATURES: scripts
    depends_on:
      dts-pg:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kc-redirect.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc-redirect.entrypoints=web"
      - "traefik.http.routers.kc-redirect.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.kc.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc.entrypoints=websecure"
      - "traefik.http.routers.kc.tls=true"
      - "traefik.http.routers.kc.service=kc"
      #- "traefik.http.routers.kc.tls.domains[0].main=${HOST_SSO}"
      - "traefik.http.services.kc.loadbalancer.server.port=8080"
      - "traefik.http.services.kc.loadbalancer.passhostheader=true"
      #- optional config for Keycloak behind proxy with path
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Host=${HOST_SSO}"
      - "traefik.http.routers.kc.middlewares=kc-headers"
    restart: unless-stopped
    networks:
      - dts-core

  dts-ranger:
    image: ${IMAGE_RANGER_ADMIN}
    container_name: dts-ranger
    depends_on:
      dts-pg:
        condition: service_healthy
    environment:
      DB_FLAVOR: postgres
      DB_HOST: ${PG_HOST}
      DB_PORT: ${PG_PORT}
      DB_NAME: ${PG_DB_RANGER}
      DB_USER: ${PG_USER_RANGER}
      DB_PASSWORD: ${PG_PWD_RANGER}
      RANGER_ADMIN_PASSWORD: ${RANGER_ADMIN_PASSWORD}
      RANGER_TAGSYNC_PASSWORD: ${RANGER_TAGSYNC_PASSWORD}
      RANGER_USERSYNC_PASSWORD: ${RANGER_USERSYNC_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:6080 || wget -qO- http://127.0.0.1:6080 >/dev/null"]
      <<: *hc
    volumes:
      # Mount a separate data directory to avoid shadowing image's /opt/ranger
      - ./services/dts-ranger:/ranger-data
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dts-core"
      - "traefik.http.routers.dts-ranger.rule=Host(`${HOST_RANGER}`)"
      - "traefik.http.routers.dts-ranger.entrypoints=websecure"
      - "traefik.http.routers.dts-ranger.tls=true"
      - "traefik.http.services.dts-ranger.loadbalancer.server.port=6080"
    restart: unless-stopped
    networks:
      - dts-core

  dts-minio:
    image: ${IMAGE_MINIO}
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION_NAME: ${S3_REGION}
      MINIO_SERVER_URL: https://${HOST_MINIO}
    volumes:
      - ./services/dts-minio/data:/data
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/minio/health/live"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dts-minio-console.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/`)"
      - "traefik.http.routers.dts-minio-console.entrypoints=websecure"
      - "traefik.http.routers.dts-minio-console.tls=true"
      - "traefik.http.routers.dts-minio-console.service=dts-minio-console"
      - "traefik.http.services.dts-minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.dts-minio-api.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/s3`)"
      - "traefik.http.routers.dts-minio-api.entrypoints=websecure"
      - "traefik.http.routers.dts-minio-api.tls=true"
      - "traefik.http.routers.dts-minio-api.service=dts-minio-api"
      - "traefik.http.services.dts-minio-api.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.dts-strip-s3.stripprefixregex.regex=/s3"
      - "traefik.http.routers.dts-minio-api.middlewares=dts-strip-s3@docker"
    restart: unless-stopped
    networks:
      - dts-core

  dts-minio-init:
    image: ${IMAGE_MINIO_MC}
    depends_on:
      dts-minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET}
    entrypoint: ["/bin/sh","-c","/init.sh"]
    volumes:
      - ./services/dts-minio-init/init/init.sh:/init.sh:ro
    restart: "no"
    networks:
      - dts-core

  dts-nessie:
    image: ${IMAGE_NESSIE}
    container_name: dts-nessie
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:19120/api/v1/config >/dev/null || wget -qO- http://127.0.0.1:19120/api/v1/config >/dev/null"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dts-core"
      - "traefik.http.routers.dts-nessie.rule=Host(`${HOST_NESSIE}`)"
      - "traefik.http.routers.dts-nessie.entrypoints=websecure"
      - "traefik.http.routers.dts-nessie.tls=true"
      - "traefik.http.services.dts-nessie.loadbalancer.server.port=19120"
    restart: unless-stopped
    networks:
      - dts-core

  dts-trino:
    image: ${IMAGE_TRINO}
    depends_on:
      dts-nessie:
        condition: service_started
      dts-minio:
        condition: service_started
    volumes:
      - ./services/dts-trino/init/catalog:/etc/trino/catalog
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:8080/v1/info"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dts-trino.rule=Host(`${HOST_TRINO}`)"
      - "traefik.http.routers.dts-trino.entrypoints=websecure"
      - "traefik.http.routers.dts-trino.tls=true"
      - "traefik.http.services.dts-trino.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - dts-core

  # ---------------------------------------------------------------------------
  # Airflow 初始化：等待 PG 就绪后初始化 DB、创建管理员账户
  # ---------------------------------------------------------------------------
  dts-airflow-init:
    image: ${IMAGE_AIRFLOW}
    container_name: dts-airflow-init
    depends_on:
      dts-pg:
        condition: service_healthy
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
      AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
      AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
      AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
      AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE: ${AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE}
      AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA: ${AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${S3_REGION}
      AIRFLOW_ADMIN_USER: ${AIRFLOW_ADMIN_USER}
      AIRFLOW_ADMIN_PASSWORD: ${AIRFLOW_ADMIN_PASSWORD}
      AIRFLOW_ADMIN_EMAIL: ${AIRFLOW_ADMIN_EMAIL}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    entrypoint: ["/bin/bash","-lc","bash /init.sh"]
    volumes:
      - ./services/dts-airflow/dags:/opt/airflow/dags
      - ./services/dts-airflow/logs:/opt/airflow/logs
      - ./services/dts-airflow/plugins:/opt/airflow/plugins
      - ./services/dts-airflow-init/init/init.sh:/init.sh:ro
    restart: "no"
    networks:
      - dts-core

  # ---------------------------------------------------------------------------
  # Airflow Webserver（走 Traefik 暴露）
  # ---------------------------------------------------------------------------
  dts-airflow-web:
    image: ${IMAGE_AIRFLOW}
    container_name: dts-airflow-web
    depends_on:
      dts-airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__WEBSERVER__SECRET_KEY: ${AIRFLOW_SECRET_KEY}
      AIRFLOW__WEBSERVER__BASE_URL: https://${HOST_AIRFLOW}
      AIRFLOW__WEBSERVER__ENABLE_PROXY_FIX: "true"
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
      AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
      AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
      AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
      AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE: ${AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE}
      AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA: ${AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${S3_REGION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    command: ["airflow","webserver","--port","8080"]
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:8080/health || wget -qO- http://127.0.0.1:8080/health"]
      <<: *hc
    volumes:
      - ./services/dts-airflow/dags:/opt/airflow/dags
      - ./services/dts-airflow/logs:/opt/airflow/logs
      - ./services/dts-airflow/plugins:/opt/airflow/plugins
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dts-core"
      - "traefik.http.routers.dts-airflow.rule=Host(`${HOST_AIRFLOW}`)"
      - "traefik.http.routers.dts-airflow.entrypoints=websecure"
      - "traefik.http.routers.dts-airflow.tls=true"
      - "traefik.http.services.dts-airflow.loadbalancer.server.port=8080"
      - "traefik.http.services.dts-airflow.loadbalancer.passhostheader=true"
      # 如需强制 HSTS 或额外 Header，可打开下面中间件
      # - "traefik.http.middlewares.af-headers.headers.stsSeconds=31536000"
      # - "traefik.http.routers.dts-airflow.middlewares=af-headers@docker"
    restart: unless-stopped
    networks:
      - dts-core

  # ---------------------------------------------------------------------------
  # Airflow Scheduler
  # ---------------------------------------------------------------------------
  dts-airflow-scheduler:
    image: ${IMAGE_AIRFLOW}
    container_name: dts-airflow-scheduler
    depends_on:
      dts-airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
      AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
      AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
      AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
      AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE: ${AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE}
      AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA: ${AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${S3_REGION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    command: ["airflow","scheduler"]
    healthcheck:
      test: ["CMD-SHELL","airflow jobs check --job-type SchedulerJob --hostname $(hostname) || echo 'not ok' && echo ok"]
      <<: *hc
    volumes:
      - ./services/dts-airflow/dags:/opt/airflow/dags
      - ./services/dts-airflow/logs:/opt/airflow/logs
      - ./services/dts-airflow/plugins:/opt/airflow/plugins
    restart: unless-stopped
    networks:
      - dts-core

  # ---------------------------------------------------------------------------
  # Airflow Triggerer（支持可延迟算子；如确实不需要可注释掉）
  # ---------------------------------------------------------------------------
  dts-airflow-triggerer:
    image: ${IMAGE_AIRFLOW}
    container_name: dts-airflow-triggerer
    depends_on:
      dts-airflow-init:
        condition: service_completed_successfully
    environment:
      AIRFLOW__CORE__EXECUTOR: ${AIRFLOW__CORE__EXECUTOR}
      AIRFLOW_UID: ${AIRFLOW_UID}
      AIRFLOW_GID: ${AIRFLOW_GID}
      AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: ${AIRFLOW__DATABASE__SQL_ALCHEMY_CONN}
      AIRFLOW__CORE__FERNET_KEY: ${AIRFLOW_FERNET_KEY}
      AIRFLOW__CORE__LOAD_EXAMPLES: ${AIRFLOW__CORE__LOAD_EXAMPLES}
      AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: ${AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION}
      AIRFLOW__LOGGING__REMOTE_LOGGING: ${AIRFLOW__LOGGING__REMOTE_LOGGING}
      AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER: ${AIRFLOW__LOGGING__REMOTE_BASE_LOG_FOLDER}
      AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID: ${AIRFLOW__LOGGING__REMOTE_LOG_CONN_ID}
      AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE: ${AIRFLOW__CONNECTIONS__S3_MINIO__CONN_TYPE}
      AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA: ${AIRFLOW__CONNECTIONS__S3_MINIO__EXTRA}
      AWS_ACCESS_KEY_ID: ${MINIO_ROOT_USER}
      AWS_SECRET_ACCESS_KEY: ${MINIO_ROOT_PASSWORD}
      AWS_DEFAULT_REGION: ${S3_REGION}
    user: "${AIRFLOW_UID}:${AIRFLOW_GID}"
    command: ["airflow","triggerer"]
    healthcheck:
      test: ["CMD-SHELL","airflow jobs check --job-type TriggererJob --hostname $(hostname) || echo 'not ok' && echo ok"]
      <<: *hc
    volumes:
      - ./services/dts-airflow/dags:/opt/airflow/dags
      - ./services/dts-airflow/logs:/opt/airflow/logs
      - ./services/dts-airflow/plugins:/opt/airflow/plugins
    restart: unless-stopped
    networks:
      - dts-core

volumes:
  maven-cache:

networks:
  dts-core:
    driver: bridge
