version: "3.9"

x-hc: &hc
  interval: 10s
  timeout: 5s
  retries: 30
  start_period: 20s

services:

  dts-proxy:
    image: ${IMAGE_TRAEFIK}
    container_name: dts-proxy
    command:
      - "--api.dashboard=${TRAEFIK_DASHBOARD}"
      - "--api.insecure=${TRAEFIK_DASHBOARD}"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--providers.file.filename=/etc/traefik/dynamic/traefik-dynamic.yml"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entrypoints.websecure.address=:443"
      - "--ping=${TRAEFIK_ENABLE_PING}"
      - "--entrypoints.metrics.address=:${TRAEFIK_METRICS_PORT}"
      - "--accesslog=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--log.level=INFO"
      - "--metrics.prometheus=true"
      - "--metrics.prometheus.entryPoint=metrics"
      - "--metrics.prometheus.addEntryPointsLabels=true"
      - "--metrics.prometheus.addServicesLabels=true"

    ports:
      - "80:80"
      - "${TLS_PORT}:443"
      - "127.0.0.1:${TRAEFIK_DASHBOARD_PORT}:8080"
      - "127.0.0.1:${TRAEFIK_METRICS_PORT}:${TRAEFIK_METRICS_PORT}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./services/dts-proxy/dynamic:/etc/traefik/dynamic:ro
      - ./services/certs:/etc/traefik/certs:ro
      - ./services/certs/server.crt:/certs/server.crt:ro
      - ./services/certs/server.key:/certs/server.key:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.default-secure.tls=true"
      - "traefik.http.routers.default-secure.entrypoints=websecure"
      - "traefik.http.routers.default-secure.rule=HostRegexp(`{any:.*}`)"
      - "traefik.tls.certificates[0].certFile=/certs/server.crt"
      - "traefik.tls.certificates[0].keyFile=/certs/server.key"
    restart: unless-stopped
    networks:
      - dts-core

  dts-pg:
    image: ${IMAGE_POSTGRES}
    environment:
      POSTGRES_PASSWORD: ${PG_SUPER_PASSWORD}
      POSTGRES_USER: ${PG_SUPER_USER}
      PGDATA: /var/lib/postgresql/data/pgdata
      PG_DB_KEYCLOAK: ${PG_DB_KEYCLOAK}
      PG_USER_KEYCLOAK: ${PG_USER_KEYCLOAK}
      PG_PWD_KEYCLOAK: ${PG_PWD_KEYCLOAK}
      PG_DB_AIRBYTE: ${PG_DB_AIRBYTE}
      PG_USER_AIRBYTE: ${PG_USER_AIRBYTE}
      PG_PWD_AIRBYTE: ${PG_PWD_AIRBYTE}
      PG_DB_OM: ${PG_DB_OM}
      PG_USER_OM: ${PG_USER_OM}
      PG_PWD_OM: ${PG_PWD_OM}
      PG_DB_TEMPORAL: ${PG_DB_TEMPORAL}
      PG_USER_TEMPORAL: ${PG_USER_TEMPORAL}
      PG_PWD_TEMPORAL: ${PG_PWD_TEMPORAL}
    volumes:
      - ./services/dts-pg/data:/var/lib/postgresql/data
      - ./services/dts-pg/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "/docker-entrypoint-initdb.d/99-ensure-users-runtime.sh"]
      interval: 10s
      timeout: 5s
      retries: 30
      start_period: 60s   
    restart: unless-stopped
    ports:
      - 5432:5432
    networks:
      - dts-core


  dts-keycloak:
    image: ${IMAGE_KEYCLOAK}
    container_name: dts-keycloak
    command:
      - start
      - --hostname=${HOST_SSO}
      - --proxy-headers=xforwarded
      - --http-enabled=${KC_HTTP_ENABLED}
    environment:
      KEYCLOAK_ADMIN: ${KC_ADMIN}
      KEYCLOAK_ADMIN_PASSWORD: ${KC_ADMIN_PWD}
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://${PG_HOST}:${PG_PORT}/${PG_DB_KEYCLOAK}
      KC_DB_USERNAME: ${PG_USER_KEYCLOAK}
      KC_DB_PASSWORD: ${PG_PWD_KEYCLOAK}
      KC_DB_URL_PROPERTIES: "sslmode=disable"
      KC_HOSTNAME: ${KC_HOSTNAME}
      KC_HOSTNAME_PORT: ${KC_HOSTNAME_PORT}
      KC_HOSTNAME_URL: ${KC_HOSTNAME_URL}
      KC_HOSTNAME_STRICT: ${KC_HOSTNAME_STRICT}
      KC_HOSTNAME_STRICT_HTTPS: ${KC_HOSTNAME_STRICT_HTTPS}
      KC_HTTP_ENABLED: ${KC_HTTP_ENABLED}
      KC_FEATURES: scripts
    depends_on:
      dts-pg:
        condition: service_healthy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.kc-redirect.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc-redirect.entrypoints=web"
      - "traefik.http.routers.kc-redirect.middlewares=redirect-to-https"
      - "traefik.http.middlewares.redirect-to-https.redirectscheme.scheme=https"
      - "traefik.http.routers.kc.rule=Host(`${HOST_SSO}`)"
      - "traefik.http.routers.kc.entrypoints=websecure"
      - "traefik.http.routers.kc.tls=true"
      - "traefik.http.routers.kc.service=kc"
      #- "traefik.http.routers.kc.tls.domains[0].main=${HOST_SSO}"
      - "traefik.http.services.kc.loadbalancer.server.port=8080"
      - "traefik.http.services.kc.loadbalancer.passhostheader=true"
      #- optional config for Keycloak behind proxy with path
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Proto=https"
      - "traefik.http.middlewares.kc-headers.headers.customrequestheaders.X-Forwarded-Host=${HOST_SSO}"
      - "traefik.http.routers.kc.middlewares=kc-headers"
    restart: unless-stopped
    networks:
      - dts-core

  dts-minio:
    image: ${IMAGE_MINIO}
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      MINIO_REGION_NAME: ${S3_REGION}
      MINIO_SERVER_URL: https://${HOST_MINIO}
    volumes:
      - ./services/dts-minio/data:/data
    healthcheck:
      test: ["CMD","curl","-fsS","http://localhost:9000/minio/health/live"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dts-minio-console.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/`)"
      - "traefik.http.routers.dts-minio-console.entrypoints=websecure"
      - "traefik.http.routers.dts-minio-console.tls=true"
      - "traefik.http.routers.dts-minio-console.service=dts-minio-console"
      - "traefik.http.services.dts-minio-console.loadbalancer.server.port=9001"
      - "traefik.http.routers.dts-minio-api.rule=Host(`${HOST_MINIO}`) && PathPrefix(`/s3`)"
      - "traefik.http.routers.dts-minio-api.entrypoints=websecure"
      - "traefik.http.routers.dts-minio-api.tls=true"
      - "traefik.http.routers.dts-minio-api.service=dts-minio-api"
      - "traefik.http.services.dts-minio-api.loadbalancer.server.port=9000"
      - "traefik.http.middlewares.dts-strip-s3.stripprefixregex.regex=/s3"
      - "traefik.http.routers.dts-minio-api.middlewares=dts-strip-s3@docker"
    restart: unless-stopped
    networks:
      - dts-core

  dts-minio-init:
    image: ${IMAGE_MINIO_MC}
    depends_on:
      dts-minio:
        condition: service_healthy
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
      S3_BUCKET: ${S3_BUCKET}
    entrypoint: ["/bin/sh","-c","/init.sh"]
    volumes:
      - ./services/dts-minio-init/init/init.sh:/init.sh:ro
    restart: "no"
    networks:
      - dts-core

  dts-nessie:
    image: ${IMAGE_NESSIE}
    container_name: dts-nessie
    healthcheck:
      test: ["CMD-SHELL","curl -fsS http://127.0.0.1:19120/api/v1/config >/dev/null || wget -qO- http://127.0.0.1:19120/api/v1/config >/dev/null"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=dts-core"
      - "traefik.http.routers.dts-nessie.rule=Host(`${HOST_NESSIE}`)"
      - "traefik.http.routers.dts-nessie.entrypoints=websecure"
      - "traefik.http.routers.dts-nessie.tls=true"
      - "traefik.http.services.dts-nessie.loadbalancer.server.port=19120"
    restart: unless-stopped
    networks:
      - dts-core

  dts-trino:
    image: ${IMAGE_TRINO}
    depends_on:
      dts-nessie:
        condition: service_started
      dts-minio:
        condition: service_started
    volumes:
      - ./services/dts-trino/init/catalog:/etc/trino/catalog
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    healthcheck:
      test: ["CMD","wget","-qO-","http://localhost:8080/v1/info"]
      <<: *hc
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dts-trino.rule=Host(`${HOST_TRINO}`)"
      - "traefik.http.routers.dts-trino.entrypoints=websecure"
      - "traefik.http.routers.dts-trino.tls=true"
      - "traefik.http.services.dts-trino.loadbalancer.server.port=8080"
    restart: unless-stopped
    networks:
      - dts-core


  # dts-dtadminui:
  #   image: node:20-alpine
  #   container_name: dts-dtadminui
  #   working_dir: /app
  #   environment:
  #     # 你的前端需要的公开变量
  #     PUBLIC_BASE_URL: https://${HOST_PORTAL}
  #     # 热更新在挂载卷/WSL上更稳定
  #     CHOKIDAR_USEPOLLING: "1"
  #     WATCHPACK_POLLING: "true"
  #     BROWSER: "none"
  #   volumes:
  #     # 把源码目录换成你的实际路径
  #     #- ./services/dtadmin-ui:/app
  #     - /opt/prod/trendsense/source/dtadmin-ui:/app
  #   command: >
  #     sh -lc "
  #       corepack enable || true;
  #       if [ -f pnpm-lock.yaml ]; then corepack prepare pnpm@latest --activate; pnpm i;
  #         pnpm dev --host 0.0.0.0 --port 3001;
  #       elif [ -f yarn.lock ]; then yarn install --frozen-lockfile;
  #         yarn dev --host 0.0.0.0 --port 3001;
  #       else npm ci || npm i;
  #         npm run dev -- --host 0.0.0.0 --port 3001;
  #       fi"
  #   labels:
  #     - traefik.enable=true
  #     - traefik.http.routers.dts-adminui.rule=Host(`${HOST_PORTAL}`)
  #     - traefik.http.routers.dts-adminui.entrypoints=websecure
  #     - traefik.http.routers.dts-adminui.tls=true
  #     - traefik.http.services.dts-adminui.loadbalancer.server.port=3001
  #     - traefik.http.services.dts-adminui.loadbalancer.passhostheader=false
  #   restart: unless-stopped
  #   networks:
  #     - dts-core

  # dts-dtadmin:
  #   image: ghcr.io/graalvm/graalvm-community:21
  #   container_name: dts-dtadmin
  #   working_dir: /app
  #   environment:
  #     SPRING_PROFILES_ACTIVE: dev
  #     SERVER_PORT: ${DTADMIN_API_PORT}
  #     # JHipster 常见端点
  #     MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE: health,info,metrics,env,loggers,threaddump,configprops
  #     # 数据库（举例：指向你全局 PG）
  #     SPRING_DATASOURCE_URL: jdbc:postgresql://dts-pg:5432/${DTADMIN_DB_NAME}
  #     SPRING_DATASOURCE_USERNAME: ${DTADMIN_DB_USER}
  #     SPRING_DATASOURCE_PASSWORD: ${DTADMIN_DB_PASSWORD}
  #     # 允许被反代：如有需要可放宽 CORS
  #     # JHIPSTER_CORS_ALLOWED_ORIGINS: https://${HOST_PORTAL}

  #     # 添加 OAuth2 配置
  #     SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_KEYCLOAK_ISSUER_URI: https://${HOST_SSO}/realms/${KC_REALM}
  #     SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_ID: ${OAUTH2_CLIENT_ID}
  #     SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_CLIENT_SECRET: ${OAUTH2_CLIENT_SECRET}
  #     SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_SCOPE: openid,profile,email
      
  #     # 跨域配置（如果需要）
  #     SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_KEYCLOAK_REDIRECT_URI: https://${HOST_PORTAL}/login/oauth2/code/keycloak
  #     CORS_ALLOWED_ORIGINS: https://${HOST_PORTAL}
  #   volumes:
  #     - /opt/prod/trendsense/source/dtadmin:/app
  #     # Gradle/Maven 缓存（可选，加快编译）
  #     #- gradle-cache:/root/.gradle
  #     #- maven-cache:/root/.m2
  #     - /home/billy/.m2:/root/.m2
  #   command: >
  #     sh -lc "
  #       if [ -f gradlew ]; then chmod +x gradlew; ./gradlew -x test bootRun --args='--server.port=${DTADMIN_API_PORT}';
  #       elif [ -f mvnw ]; then chmod +x mvnw; ./mvnw -DskipTests spring-boot:run -Dspring-boot.run.jvmArguments='-Dserver.port=${DTADMIN_API_PORT}';
  #       else echo 'No Gradle/Maven wrapper found'; exit 1; fi"
  #   healthcheck:
  #     test: ["CMD","wget","-qO-","http://localhost:${DTADMIN_API_PORT}/management/health"]
  #     interval: 10s
  #     timeout: 5s
  #     retries: 30
  #     start_period: 30s
  #   labels:
  #     - traefik.enable=true
  #     # 同域：Host(${HOST_PORTAL}) + /api 前缀
  #     - traefik.http.routers.dts-dtadmin-api.rule=Host(`${HOST_PORTAL}`) && PathPrefix(`/api`)
  #     - traefik.http.routers.dts-dtadmin-api.entrypoints=websecure
  #     - traefik.http.routers.dts-dtadmin-api.tls=true
  #     # /api 转发到后端根路径：去掉 /api 前缀
  #     - traefik.http.middlewares.dts-dtadmin-api-strip.stripprefixregex.regex=/api
  #     - traefik.http.routers.dts-dtadmin-api.middlewares=dts-dtadmin-api-strip@docker
  #     # 指定后端端口
  #     - traefik.http.services.dts-dtadmin-api.loadbalancer.server.port=${DTADMIN_API_PORT}
  #     # 如你之前的前端容器与 Traefik 不在同一网络，请显式指定：
  #     # - traefik.docker.network=yst-stack_dts-core
  #   restart: unless-stopped
  #   depends_on:
  #     dts-pg:
  #       condition: service_healthy
  #     dts-keycloak:
  #       condition: service_started
  #   networks: [dts-core]

 

volumes:
  gradle-cache:

networks:
  dts-core:
    driver: bridge
